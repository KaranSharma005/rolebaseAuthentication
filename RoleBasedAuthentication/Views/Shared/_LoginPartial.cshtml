@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
    @{
        var user = await UserManager.GetUserAsync(User);
        // Console.WriteLine(User.Identity.NameIden);
        
    }
    @if (SignInManager.IsSignedIn(User))
    {
    <li class="nav-item">
        <a  class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name!</a>
    </li>
    <li>
            @if (user != null)
            {
                string name = user.Name;
                <a class="nav-link text-dark" asp-area="Identity">@name</a>
            }
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
        </li>
        if (SignInManager.IsSignedIn(User) && (User.IsInRole("Director") || User.IsInRole("Teacher")))
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
            </li>
        }
    }
    else{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
    }
</ul>
